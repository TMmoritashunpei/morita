フレームワークのメリット
全部書かなくてはいけないことをフレームワークがやってくれる。
開発時間が短縮される
小規模レベルのアプリケーションであればその通り
大規模だと小回りが利かなくなる。
大規模ではデメリットに変わると考える。



覚えておかないといけないことがかなり増える。
関数型言語

STSダウンロードする
https://spring.io/tools/sts/all
C直下に解凍して
springboot
起動する。
エクリプスが開く

Maven
ビルドツール
依存関係
関連付けしてくれる
ビルドの順番もやってくれる。
ビルドツール
アンツ
アント
アリの事
アントの上にmavenを持つと協力なビルドツール

スプリング
グレードルを使うことができる。


sring stater projectを開く
hajiboot でプロジェクト作成する。
web追加する


テンプレートエンジン
タイムリーフ
JSP
html がjavaに組み込まれている。
ran as からmaven インストール
BUILD SUCCESS

pom.xml
dependency
依存関係


依存性
何らかの外部資源に頼っているという事。
get mapping
URLパラメータ
リクエストパラメータ
ブラウザの？以降の部分
post

rest contloller

IP にドメインを紐付けている
ドメインの後に何もなかったらルートディレクトリ

spring boot appを実行する
localhost:8080でレスポンスが返るようになる
実行すると
ブラウザから中身が表示された
tomcatが起動して
8080ポートで接続できるようになった。
@SpringBootApplication
付いているクラスを探してきている。
これがメインクラスであることをわかるようにしてある。

@getMapping
パスを指定していないので
呼ばれる。
文字列だけを返している。
rest
APIを作るときにrestContllorerを使うときがある。
ステートトランスファー


jar ファイルさえあれば
本番環境でもどこでも動かすことができる。
サーズなどにデプロイして上げれば動かすことができる。


ホットリローディング
起動しぱなっしで読み込んでくれる。

本番環境
ホットデプロイという。
再起動しなくてよい。

spring-boot-devtools


DI
依存性の注入
DIコンテナ
インスタンス管理する。
インスタンスを生成する。

Bean


エントリポイント作成
