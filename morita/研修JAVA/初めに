ネットワーク通信
DBとの連携
フレームワークが担ってくれる
アパッチなどがやっていく。
統合開発環境

メトリクス
監視項目
リファクタリングとは

コードができて
要らないところ
重複しているもの
ドライの法則
for文に変えて読みやすいようにする。
足りないコメント
javadocの記述をきれいにする。

ドライ
同じ処理を繰り返さない
ドントリピートユアセルフ
COC
設定より規約
JAVA設定地獄
そこからrubyは設定より規約でやっていきましょうという事で開発された。
クラス名　テーブル　マッピング機能がある。
コントローラの名前とテーブルの名前を一緒に使ってくれる。自動的にフレームワーク画やてくれる

ウォーターフォール
水が落ちるように一定方向しかいけない

アジャイル
要件定義　実装　テスト　で一サイクル
これを繰り返していく。


文字列の操作
必ず行う作業になる。
文字列連結

ignoreCASE　大文字小文字無視する
length 文字数長さ
empty空

ライブラリ


リクエスト
ipアドレスからどこからきているか調べて
IPアドレスだけ抜き取りたい場合
文字切り出しメソッド使う


サブストリング
別のメソッドとなる
シグニチヤー
引数違うメソッド

よく使う
trim()
DB idがある
idの最大文字数8文字で現在は4文字
IDを使うときに空文字がうっとおしい
idをストリングで作る
場合空白があるときに処理がうまくいかない
場合がある
キャスト（空白があると型変換できなくなる）
全角スペースは除去されない。
replase()


ストリングビルダー
速度の違い
好み



デバッグ実行
ステップ実行
一行ずつ実行していく。
ブレークポイントをつけてデバックする。

been
DBのカラム
マッピング
DBからとってきて
格納している。
等価判定していく必要がある。
処理ロジック
処理の流れ
が書いてあるクラスにデータは入らない。
DTO
データアクセスオブジェクト
データベースとやり取りするためのオブジェクト

なんでこれを使うかを考える。
リスト
コレクションズソート
で順番がソートできる

Map
マスターから値を取ってきて
mapに入れておけば使える。
レディス
キャッシュサーバーに入れる
setは重複できない。

列挙型
定数
enam　ファイナルをまとめていれる
ジェネリクス


IO インプットアウトプット
.dat
同じバイト数でもSJIS UTF8で表示できなくなる同じ二進数で書いてあっても読めずに文字化けしてしまう。
CP932　デフォルト

tyr

catch
外部資源とやり取りするとき
通信
API
DB
ファイル
どんなエラーが起きるか予想できない
ファイルが読めないなど
tryの中に予測して
エラーができたら
catchの中に
入る

fainay {
どちらにしても行われる処理
}
そのあとの
catch ログを吐く必要がある

今は新しい書き方がある。
try(FileWriter fw = new FileWriter("rpgava.dat") {
catch(IOEXception e) {
  }
}

バッファリングフィルタ

ドキュメントの読み方を学ばないといけない。

CSVかTSV
カンマの含まれているデータが入っているとおかしいことが起きるからTSVにすればいい
""で囲ってあげれば文字列として認識されるのでCSVでも使えることがある。
プロパティファイル
＝と＃が良く使われる。
XML
APIのやり取り
相手に返したり。
近年JSONファイルに置き換わっている。

シリアライズ
データを直列化
デシリアライズ
直列化から並列化にする。


F６ステップオーバー
ステップイン　メソッド
ステップイン　メソッドの呼美だし先に行く
ステップリターン
リターン先に行く


仕様書読んだりすることは余りない
仕様とは


イベントフロー
詳細設計
マスタDB


APIアプリケーションプラットフォーム

APIとは
最近のトレンドHTMLCSS JSで画面をつくる
サーバーサイドでAPIを用意して
画面から決められたJSONなどのデータを
入力フォームを押したらAPIがわで決められたデータを順番通りに作ったデータ
APIのURLに対して
HTTPで送り処理をしてもらう
不動産サイト
APIに対してリクエストしてあげると
決められたJSONで帰ってくる
受け取った画面でデータを解析して
表示させる。
最近のはやり
この形で受け取り返すというのは決まっている。
XMLも使える。


テスト
正常系と異常系がある。
apiから違うapiを呼ぶこともある。
単体テスト
メソッドの動きなど。
結合テスト
プログラムを機能としたときに
機能するかチェックする。



総合テスト
要件定義に対応しているか。
ただ要件にあっただけではだめ
機能より上
systemとして１から10までやらないといけない。
systemテストともいわれる。
systemの事を理解してどういうポイントで
テストするのか考える必要がある。

改修したら
デグレってないか確認する。
影響がありそうなところはデグレ試験を行う。
影響箇所を洗い出して、テストを行う。
レビューされて直す

固定長形式
同じバイト形式が送られてくる。

結合テストと総合テストで内容が
かぶる場合がある。

連携方式：
画面から直接くるか
アトムというシステムからくるか

ポイント観点を作ること
試験データを作ること。
DBのデータを作らないといけない。


単体結合総合
パフォーマンステスト。

ハイレベル
スループット
入ってくる

レスポンス

アパッチ
の
Jメーターというツール
リクエストを投げる。
変に時間かかっているかどうか

テスト計画
必要になる場合はどんな時か
非機能要件
レスポンス
やバリデートでこんなのが制限かけられる
こういうサイトと連携して使うことができる。

非機能要件まで決められて
客がそこまで求めている場合は
テスト計画を作らないといけないことがある。
テスト計画をレビューしてもらう必要がある。

必要ないパターンもある。

要件定義から仕様書
テスト実施する。

バッチ
画面あるものWEBサイト
画面が無いけど
APIなどのサイトもある

バッチ
月一だったり期間で自動処理される。

大きいシステム
ディレクトリ構成図が必要になる場合もある。
規模が小さいようなら端折ることもある。

内部設計
APIの細かい所
ER図なども匙加減次第になる。

詳細設計

実装

単体テスト
計画書
目的
テスト範囲
管理方法
デバッグ方法
実施環境
実施方法
体制図
検証方法

仕様書
リンクテスト
アウトプット
ページングテスト
データベース

エビデンス

PB曲線
どれだけバグが入っているかを表示する。

1000行で一つバグが出るという指標がある
バグが出てない場合は突っ込まれることもある。

総合テスト
結合テスト
単体テスト
などのレベル感が難しい。
同じ内容のテストがかぶってしまうと無駄になってしまう。

自分以外の第三者
パット見たときにわかるように
他のドキュメントと同じレベル間で書く必要がある。
新規参画者にわかるようにしていかないといけない。

データパターン
間違ったものを作ったらテストにならない。
きっちりやらないといけない。

操作フロー

シナリオと被ってくる。

A画面からB画面に遷移するのは結合テスト
単体テストでは遷移はできない。

テスト結果
不具合内容

総合テストは全体的な流れでテストを行っている。

テストするのは自分で行わない場合もある。

受入テスト
客がやるテスト。

移行
データ移行
システム移行
DBオラクルからMYSQLにスキーマの変更が必要になる
オンプレミスからAWSに変えました。

運用
リリース後

リリースふ復旧手順
リリースリハーサル
手順書を詰めてリハーサルをする。
保守環境は本番で同じ環境にする。
テスト環境でOKだったら
保守環境に入れていく。

総合
結合
内部設計
要件定義　外部設計

開発演習
JAVA
単体テスト結合テスト。


単体テスト
実装も含む

結合テストは異常系
をやるべき
シナリテスト


ログ
インフォ
デバッグ
ワーニング
エラー

本番ではデバッグログを出さない
log4j

atom orenge

詳細設計

DB
N
O
API
固定長形式
固定長と可変長を組み合わせることもできる。
から振り分ける
人間には優しくない。

受け取ったらフォーマットチェック
パターンチェック
属性など

アクセスログ

外部API呼び出し

ロードバランシング
負荷分散
フェイルオーバー
マスタースレーブ構成

入出力情報
詳細設計
どうすればいいのか
プログラム一覧があれば楽ではある
設計書とプログラムを並べてみるのが早い

共通処理一覧
設計の時点でSQL決まっている

DB参照面と更新面がある

正常処理は飛ばして書く
VOバリューオブジェクト

エラーハンドリングしっかり行う
全体の概要を知ってから
