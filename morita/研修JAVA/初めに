ネットワーク通信
DBとの連携
フレームワークが担ってくれる
アパッチなどがやっていく。
統合開発環境

メトリクス
監視項目
リファクタリングとは

コードができて
要らないところ
重複しているもの
ドライの法則
for文に変えて読みやすいようにする。
足りないコメント
javadocの記述をきれいにする。

ドライ
同じ処理を繰り返さない
ドントリピートユアセルフ
COC
設定より規約
JAVA設定地獄
そこからrubyは設定より規約でやっていきましょうという事で開発された。
クラス名　テーブル　マッピング機能がある。
コントローラの名前とテーブルの名前を一緒に使ってくれる。自動的にフレームワーク画やてくれる

ウォーターフォール
水が落ちるように一定方向しかいけない

アジャイル
要件定義　実装　テスト　で一サイクル
これを繰り返していく。


文字列の操作
必ず行う作業になる。
文字列連結

ignoreCASE　大文字小文字無視する
length 文字数長さ
empty空

ライブラリ


リクエスト
ipアドレスからどこからきているか調べて
IPアドレスだけ抜き取りたい場合
文字切り出しメソッド使う


サブストリング
別のメソッドとなる
シグニチヤー
引数違うメソッド

よく使う
trim()
DB idがある
idの最大文字数8文字で現在は4文字
IDを使うときに空文字がうっとおしい
idをストリングで作る
場合空白があるときに処理がうまくいかない
場合がある
キャスト（空白があると型変換できなくなる）
全角スペースは除去されない。
replase()


ストリングビルダー
速度の違い
好み



デバッグ実行
ステップ実行
一行ずつ実行していく。
ブレークポイントをつけてデバックする。

been
DBのカラム
マッピング
DBからとってきて
格納している。
等価判定していく必要がある。
処理ロジック
処理の流れ
が書いてあるクラスにデータは入らない。
DTO
データアクセスオブジェクト
データベースとやり取りするためのオブジェクト

なんでこれを使うかを考える。
リスト
コレクションズソート
で順番がソートできる

Map
マスターから値を取ってきて
mapに入れておけば使える。
レディス
キャッシュサーバーに入れる
setは重複できない。

列挙型
定数
enam　ファイナルをまとめていれる
ジェネリクス


IO インプットアウトプット
.dat
同じバイト数でもSJIS UTF8で表示できなくなる同じ二進数で書いてあっても読めずに文字化けしてしまう。
CP932　デフォルト

tyr

catch
外部資源とやり取りするとき
通信
API
DB
ファイル
どんなエラーが起きるか予想できない
ファイルが読めないなど
tryの中に予測して
エラーができたら
catchの中に
入る

fainay {
どちらにしても行われる処理
}
そのあとの
catch ログを吐く必要がある

今は新しい書き方がある。
try(FileWriter fw = new FileWriter("rpgava.dat") {
catch(IOEXception e) {
  }
}

バッファリングフィルタ

ドキュメントの読み方を学ばないといけない。

CSVかTSV
カンマの含まれているデータが入っているとおかしいことが起きるからTSVにすればいい
""で囲ってあげれば文字列として認識されるのでCSVでも使えることがある。
プロパティファイル
＝と＃が良く使われる。
XML
APIのやり取り
相手に返したり。
近年JSONファイルに置き換わっている。

シリアライズ
データを直列化
デシリアライズ
直列化から並列化にする。


F６ステップオーバー
ステップイン　メソッド
ステップイン　メソッドの呼美だし先に行く
ステップリターン
リターン先に行く


仕様書読んだりすることは余りない
仕様とは


イベントフロー
詳細設計
マスタDB
